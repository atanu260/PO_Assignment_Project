@model PO_Assignment_Project.Models.PurchaseOrder

@{
    ViewData["Title"] = "Create Purchase Order";
}

<h2>Create Purchase Order</h2>

<form asp-action="Create">
    <div class="form-group">
        <label asp-for="OrderNumber" class="control-label"></label>
        <input asp-for="OrderNumber" class="form-control" />
    </div>

    <div class="form-group">
        <label asp-for="OrderDate" class="control-label"></label>
        <input asp-for="OrderDate" class="form-control" type="date" />
    </div>

    <div class="form-group">
        <label asp-for="VendorID" class="control-label">Vendor</label>
        <select asp-for="VendorID" class="form-control" asp-items="ViewBag.VendorID"></select>
    </div>

    <div class="form-group">
        <label asp-for="Notes" class="control-label"></label>
        <textarea asp-for="Notes" class="form-control"></textarea>
    </div>

    <div class="form-group">
        <label asp-for="OrderValue" class="control-label"></label>
        <input asp-for="OrderValue" class="form-control" />
    </div>

    <div class="form-group">
        <label asp-for="OrderStatus" class="control-label"></label>
        <input asp-for="OrderStatus" class="form-control" />
    </div>

    <h4>Order Details</h4>

    <div class="form-group">
        <table class="table">
            <thead>
                <tr>
                    <th>Material</th>
                    <th>Quantity</th>
                    <th>Rate</th>
                    <th>Value</th>
                    <th>Expected Date</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.PurchaseOrderDetails.Count; i++)
                {
                    <tr>
                        <td>
                            <select asp-for="@Model.PurchaseOrderDetails[i].MaterialID" class="form-control" asp-items="ViewBag.MaterialID"></select>
                        </td>
                        <td>
                            <input asp-for="@Model.PurchaseOrderDetails[i].ItemQuantity" id="ItemQuantity_@i" name="ItemQuantity" class="form-control" oninput="calculateItemValue(@i)" />
                        </td>
                        <td>
                            <input asp-for="@Model.PurchaseOrderDetails[i].ItemRate" id="ItemRate_@i" name="ItemRate" class="form-control" oninput="calculateItemValue(@i)" />
                        </td>
                        <td>
                            <input asp-for="@Model.PurchaseOrderDetails[i].ItemValue" id="ItemValue_@i" class="form-control" readonly />
                        </td>
                        <td>
                            <input asp-for="@Model.PurchaseOrderDetails[i].ExpectedDate" class="form-control" type="date" />
                        </td>
                    </tr>
                }

            </tbody>
        </table>
    </div>

    <div class="form-group">
        <input type="submit" value="Save" class="btn btn-primary" />
    </div>
</form>

<div>
    <a asp-action="Index" class="btn btn-secondary">Back to List</a>
</div>

<script type="text/javascript">
    function calculateItemValue(index) {
        // Get the quantity and rate inputs by their IDs
        var quantityElement = document.getElementById('ItemQuantity_' + index);
        var rateElement = document.getElementById('ItemRate_' + index);
        var valueElement = document.getElementById('ItemValue_' + index);

        if (quantityElement && rateElement && valueElement) {
            var quantity = quantityElement.value;
            var rate = rateElement.value;

            // Ensure that both quantity and rate are valid numbers
            var quantityValue = parseFloat(quantity);
            var rateValue = parseFloat(rate);

            if (!isNaN(quantityValue) && !isNaN(rateValue)) {
                // Calculate the item value (quantity * rate)
                var itemValue = quantityValue * rateValue;

                // Set the calculated value into the ItemValue field
                valueElement.value = itemValue.toFixed(2); // Rounded to 2 decimal places
            } else {
                // If inputs are not valid, reset the ItemValue
                valueElement.value = '';
            }
        } else {
            console.error("One or more elements could not be found for index: " + index);
        }
    }
</script>


